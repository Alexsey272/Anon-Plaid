from loader import dp, db, bot
from aiogram import Bot, types
from FSM import *
import aiogram.utils.exceptions
from aiogram.types.message import ContentTypes
from keyboards import admin_menu
from data import config
from utils.logging import warning_log

@dp.message_handler(commands=['admpanel'])
async def send_message(message: types.Message):
    if db.admin_exists(message.from_user.id):
        await bot.send_message(message.from_user.id, f'*–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n*–°—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n_–í –±–æ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É–∂–µ {int(db.count_user())} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π_\n\n_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:_', reply_markup = admin_menu, parse_mode = "Markdown")


@dp.message_handler(commands=['message'])
async def send_message(message: types.Message):
    if db.admin_exists(message.from_user.id):
        await SendMessage.user.set()
        await message.answer(
            "*–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ*"
            "\n\n_–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ '–û—Ç–º–µ–Ω–∞'_",
            parse_mode="Markdown")
    else:
        await message.answer("‚ö†Ô∏è *–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º*", parse_mode="markdown")


@dp.message_handler(lambda message: message.text.isdigit(), state=SendMessage.user)
async def add_user_msg(message: types.Message, state: FSMContext):
    if not db.user_exists(message.text):
        await message.answer("*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º ID, –Ω–µ –Ω–∞–π–¥–µ–Ω*", parse_mode="Markdown")
    else:
        async with state.proxy() as data:
            data['user'] = message.text

        await SendMessage.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", parse_mode="Markdown")


@dp.message_handler(lambda message: not message.text.isdigit(), state=SendMessage.user)
async def not_add_user_msg(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("_–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ_", parse_mode="Markdown")
    else:
        await message.answer("_ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑_",
                             parse_mode="Markdown")


@dp.message_handler(state=SendMessage.msg)
async def send_msg(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
        msg = data['msg']

        await bot.send_message(data['user'], f"*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n_{msg}_", parse_mode="Markdown")
        await state.finish()
        return await message.answer("‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*", parse_mode="Markdown")


@dp.message_handler(commands=['allmsg'])
async def send_message(message: types.Message):
    if db.admin_exists(message.from_user.id):
        await AllMessage.msg.set()
        await message.answer(
            "*–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?*",
            parse_mode="Markdown")
    else:
        await message.answer("‚ö†Ô∏è *–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º*", parse_mode="markdown")


@dp.message_handler(content_types=ContentTypes.PHOTO, state=AllMessage.msg)
async def add_photo_report(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['msg'] = message.caption
            msg = data['msg']

            await message.photo[-1].download('photo_user/' + str(message.from_user.id) + 'spam.jpg')
            with open('photo_user/' + str(message.from_user.id) + 'spam.jpg', 'rb') as photo:
                for m in db.get_all_users():
                    await bot.send_photo(int(m[0]), photo, caption=f"*{msg}*", parse_mode="Markdown")

            await message.answer(
            "‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*",
            parse_mode="Markdown")
            await state.finish()
    except aiogram.utils.exceptions.BotBlocked:
    	await message.answer("üòî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!")
    	db.delete_block_user(db.select_connect_with(message.from_user.id)[0], message.from_user.id, None)
    	await state.finish()
    	await start(message, state)


@dp.message_handler(content_types=ContentTypes.TEXT, state=AllMessage.msg)
async def add_user_msg(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['msg'] = message.text
            msg = data['msg']

            for m in db.get_all_users():
                await bot.send_message(int(m[0]), f"*{msg}*", parse_mode="Markdown")
            await state.finish()

            return await message.answer("‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*", parse_mode="Markdown")
    except aiogram.utils.exceptions.BotBlocked:
    	await message.answer("üòî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!")
    	db.delete_block_user(db.select_connect_with(message.from_user.id)[0], message.from_user.id, None)
    	await state.finish()
    	await start(message, state)



@dp.message_handler(lambda message: message.text.isdigit(), state=Block.user)
async def add_black_list(message: types.Message, state: FSMContext):
    if not db.user_exists(message.text):
        await message.answer("*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º ID, –Ω–µ –Ω–∞–π–¥–µ–Ω*", parse_mode="Markdown")
    else:
        if message.text != str(config.BOT_OWNER):
            async with state.proxy() as data:
                data['user'] = message.text

                await Block.next()
                await message.answer("_–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏_", parse_mode="Markdown")
        else:
            await message.answer("*–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞*", parse_mode="Markdown")


@dp.message_handler(lambda message: not message.text.isdigit(), state=Block.user)
async def not_add_black_list(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        return await message.answer("_ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑_",
                                    parse_mode="Markdown")


@dp.message_handler(state=Block.cause)
async def add_cause(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cause'] = message.text

        await Block.next()
        await message.answer("_–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω_", parse_mode="Markdown")


@dp.message_handler(lambda message: message.text.isdigit(), state=Block.time)
async def add_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['time'] = message.text

        block_id = data['user']
        cause = data['cause']
        time = data['time']

        db.blocked_user(block_id)
        await message.answer(f"‚õî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {block_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*", parse_mode="Markdown")
        await bot.send_message(block_id,
                               f"*–í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞*\n_–°—Ä–æ–∫: {time} –¥–Ω–µ–π_\n_–ü—Ä–∏—á–∏–Ω–∞: {cause}_",
                               parse_mode="Markdown")
        await state.finish()


@dp.message_handler(lambda message: not message.text.isdigit(), state=Block.time)
async def not_add_time(message: types.Message, state: FSMContext):
    return await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ü–∏—Ñ—Ä–∞–º–∏")


@dp.message_handler(lambda message: message.text.isdigit(), state=Unblock.user)
async def Unblocked_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user'] = message.text
        unblock_id = data['user']

        db.unblocked_user(unblock_id)

        await message.answer(f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unblock_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!* ‚úÖÔ∏è", parse_mode="Markdown")
        await bot.send_message(unblock_id, "*–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*", parse_mode="Markdown")
        await state.finish()


@dp.message_handler(lambda message: not message.text.isdigit(), state=Unblock.user)
async def not_Unblock(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        return await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑")


@dp.message_handler(lambda message: message.text.isdigit(), state=Admin.user)
async def add_user_admin(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if not db.user_exists(message.text):
            await message.answer("*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω*", parse_mode="Markdown")
        else:
            data['admin'] = message.text
            admin_new = data['admin']

            db.add_admin(admin_new)

            await message.answer(f"*–í—ã –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:*\n\n‚úÖ _{admin_new}_",
                                 parse_mode="Markdown")
            await bot.send_message(admin_new, "*–í–∞—Å –ø–æ–≤—ã—Å–∏–ª–∏ –¥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!* üòé", parse_mode="Markdown")
            await state.finish()


@dp.message_handler(lambda message: not message.text.isdigit(), state=Admin.user)
async def not_add_user_admin(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("_–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ_", parse_mode="Markdown")
        await state.finish()
    else:
        await message.answer("_ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑_",
                             parse_mode="Markdown")



@dp.message_handler(lambda message: message.text.isdigit(), state=AdminDel.user)
async def del_user_admin(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["Admin"] = message.text
        admin_del = data["Admin"]

        db.del_admin(admin_del)

        await message.answer(f"*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* _{admin_del} –±—ã–ª —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω!_ ‚ùåÔ∏è", parse_mode="Markdown")
        await bot.send_message(admin_del, "–í–∞—Å —Ä–∞–∑–∂–∞–ª–æ–≤–∞–ª–∏ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üòî")
        await state.finish()


@dp.message_handler(lambda message: not message.text.isdigit(), state=AdminDel.user)
async def not_del_user_admin(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("_–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ_", parse_mode="Markdown")
        await state.finish()
    else:
        await message.answer("_ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑_",
                             parse_mode="Markdown")
