from yoomoney import Quickpay,Client
from loader import dp,bot,db,now
from aiogram import types
from keyboards import *
from datetime import *
from aiogram.types.message import ContentType
from FSM import *
import random
from data import config

@dp.message_handler(commands=['pay'])
@dp.message_handler(lambda message: message.text == '–ü–æ–¥–ø–∏—Å–∫–∞ üí≤', state='*')
async def price(message: types.Message):
    if not db.subscribtion_exists(message.from_user.id):
        await bot.send_message(message.chat.id,
                               "*–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞*\n\n–ù–∞—à —á–∞—Ç –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –Ω–æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–∞–≤–∏—Ç—Å—è "
                               "–æ—Ç —Ä–µ–∫–ª–∞–º—ã, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç\n\n"
                               "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫:\n\n‚úÖÔ∏è *–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã*\n"
                               "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ\n\n"
                               "‚úÖÔ∏è *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞*\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –Ω–∞—à –ø—Ä–æ–µ–∫—Ç, –≤—ã –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç–µ –Ω–∞—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è"
                               " —á–∞—Ç–∞, –∞ —Ç–∞–∫ –∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –µ–≥–æ —Ä–∞–±–æ—Ç—É",
                               reply_markup=subscription_menu, parse_mode="Markdown")
        await message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*', parse_mode = "Markdown")


    elif db.subscribtion_exists(message.from_user.id):

        type_sub = db.by_subscribtion(message.from_user.id)[0][4]
        from_by = datetime.strptime(db.by_subscribtion(message.from_user.id)[0][2], '%Y-%m-%d')

        if from_by < now:
            db.del_subscribtion(message.from_user.id)
            await bot.send_message(message.chat.id,
                                   "*–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞*\n\n–ù–∞—à —á–∞—Ç –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –Ω–æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç "
                                   "–∏–∑–±–∞–≤–∏—Ç—Å—è –æ—Ç —Ä–µ–∫–ª–∞–º—ã, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç"
                                   "\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫:\n\n‚úÖÔ∏è *–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã*"
                                   "\n–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ\n\n"
                                   "‚úÖÔ∏è *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞*\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –Ω–∞—à –ø—Ä–æ–µ–∫—Ç, –≤—ã –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç–µ –Ω–∞—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è"
                                   " —á–∞—Ç–∞, –∞ —Ç–∞–∫ –∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –µ–≥–æ —Ä–∞–±–æ—Ç—É",
                                   reply_markup=subscription_menu, parse_mode="Markdown")
            await message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*', parse_mode = "Markdown")

        elif from_by >= now:
            await message.answer(
                "*–£ –≤–∞—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {0}*\n\n_–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {1}_"
                "\n\n_–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–ø–æ–∑–∂–µ üòâ_".format(
                    type_sub, from_by), parse_mode="Markdown")


@dp.message_handler(lambda message: message.text == '79‚ÇΩ –∑–∞ 7 –¥–Ω–µ–π' or
                                    message.text == '130‚ÇΩ –∑–∞ 30 –¥–Ω–µ–π' or
                                    message.text == '599‚ÇΩ –∑–∞ 365 –¥–Ω–µ–π', state='*')
async def buy_st(message: types.Message):
    global title, about, photo, price_sub

    if message.text == '79‚ÇΩ –∑–∞ 7 –¥–Ω–µ–π':
        title = "–ü–æ–¥–ø–∏—Å–∫–∞ Standard"
        about = "–ü–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –Ω–∞ 7 –¥–Ω–µ–π, –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        photo = "https://i.ibb.co/5sM0S8d/standart.png"
        price_sub = 79
        num="ST"

    if message.text == '130‚ÇΩ –∑–∞ 30 –¥–Ω–µ–π':
        title = "–ü–æ–¥–ø–∏—Å–∫–∞ Premium"
        about = "–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º, –Ω–∞ 1 –º–µ—Å—è—Ü, –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        photo = "https://i.ibb.co/Lv0FVdR/premium.png"
        price_sub = 139
        num="PR"

    if message.text == '599‚ÇΩ –∑–∞ 365 –¥–Ω–µ–π':
        title = "–ü–æ–¥–ø–∏—Å–∫–∞ VIP"
        about = "–ü–æ–¥–ø–∏—Å–∫–∞ –í–ò–ü, –Ω–∞ 1 –≥–æ–¥, –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        photo = "https://i.ibb.co/7SL38yq/vip.png"
        price_sub = 599
        num="VP"

    quickpay = Quickpay(
            receiver="410012801752426",
            quickpay_form="shop",
            targets=title,
            formcomment=about,
            short_dest=about,
            paymentType="SB",
            sum=price_sub,
            label=f"{num}{message.from_user.id}"
            )


    payments = InlineKeyboardButton("–ó–∞–ø–ª–∞—Ç–∏—Ç—å", url  = str(quickpay.redirected_url))
    pay_menu = InlineKeyboardMarkup().add(payments)

    await bot.send_photo(message.chat.id, photo, caption=f"*{title}*\n\n{about}\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å: *{str(price_sub)}RUB",parse_mode = "Markdown", reply_markup = pay_menu)

@dp.message_handler(commands=['add_sub'])
async def price(message: types.Message):
    if str(message.from_user.id) == config.BOT_OWNER:
        await AddSubscribe.user.set()
        await message.answer("–ö–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É?")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", parse_mode="Markdown")

@dp.message_handler(lambda message: message.text.isdigit(), state=AddSubscribe.user)
async def add_user_sub(message: types.Message, state: FSMContext):
    if not db.user_exists(message.text):
        await message.answer("*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º ID, –Ω–µ –Ω–∞–π–¥–µ–Ω*", parse_mode="Markdown")
    else:
        async with state.proxy() as data:
            data['user'] = message.text

        await AddSubscribe.next()
        await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", parse_mode="Markdown")

@dp.message_handler(lambda message: message.text.isdigit(), state=AddSubscribe.period)
async def add_period_sub(message: types.Message, state: FSMContext):

    global from_date, status
    async with state.proxy() as data:
            data['period'] = message.text
    
    number_pay = random.randint(1000000000000, 9999999999999)

    if int(data['period']) == 7:
        total_amount = 7900
        status = 'Standard'
        from_date = date.today() + timedelta(days=int(data['period']))

    if int(data['period']) == 30:
        total_amount = 13900
        status = 'Premium'
        from_date = date.today() + timedelta(days=int(data['period']))

    if int(data['period']) == 365:
        total_amount = 59900
        status = 'VIP'
        from_date = date.today() + timedelta(days=int(data['period']))

    db.add_subscribtion(
        int(data['user']),
        date.today(),
        from_date,
        status,
        number_pay
    )

    await bot.send_message(
        message.chat.id,
        f"‚úÖÔ∏è –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞ —Å—É–º–º—É {total_amount // 100} RUB!"
        f"\n–ü–∞–∫–µ—Ç Standart —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–æ {from_date}\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòâ", reply_markup=mark_menu)

    await bot.send_message(-1001589390234,
                           f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–æ–±—Ä–µ–ª –ø–æ–¥–ø–∏—Å–∫—É:\n\nID:* _{data['user']}_\n*–ü–æ–¥–ø–∏—Å–∫–∞:* _{status}_"
                           f"\n*–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* _{number_pay}_\n*–î–æ—Ö–æ–¥:*" +
                           f"_{total_amount // 100}RUB_", parse_mode="Markdown")

    await bot.send_sticker(-1001589390234, "CAACAgIAAxkBAAIkrmCH4Ezu3k0w_8-0-KvgBtnAPvA8AAJoAAPANk8TTP09o-fEaYcfBA")
    await bot.send_sticker(data['user'],
                           "CAACAgIAAxkBAAIkeGCG4rGz_NC_PCAKw0LTd04Et0WGAALeAANWnb0Kpe93OFWDFcQfBA")