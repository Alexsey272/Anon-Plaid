from loader import dp, db, bot, now
import asyncio
from aiogram import Bot, types
from keyboards import *
from FSM import *
from aiogram.types.message import ContentTypes
import aiogram.utils.exceptions
import datetime
from datetime import *
from aiogram.utils.exceptions import Throttled
import requests
from data import config
from utils.logging import warning_log

# —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):

    if not db.user_exists(message.from_user.id):
        await Register.confirm.set()
        await message.answer(
            '–í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [–ø—Ä–∞–≤–∏–ª–∞–º–∏](https://telegra.ph/Pravila-anonimnogo-chata-Crimson-Plaid-07-12) –æ–±—â–µ–Ω–∏—è –≤ –ê–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ',
            reply_markup=confirm_button, parse_mode="Markdown")
    else:
        sex = db.get_sex_user(message.from_user.id)

        await state.finish()

        if sex[0] is None:

            await message.answer("–î–ª—è —É–ª—É—á—à–µ–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª", reply_markup=my_sex)
        else:

            if not db.subscribtion_exists(message.from_user.id):
                await bot.send_message(message.chat.id,
                                       f"*CRIMSON PLAID*\n\n*–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:*"
                                       f"\n_–ü–æ–¥–ø–∏—à–∏—Å—å - https://vk.com/crimsonplaid_\n\n_–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º, "
                                       f"–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ—è–≤–∏–≤—à–µ–π—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏_ üòâ",
                                       reply_markup=mark_menu, parse_mode="Markdown")


            elif db.subscribtion_exists(message.from_user.id):

                from_by = datetime.strptime(db.by_subscribtion(message.from_user.id)[0][2], '%Y-%m-%d')

                if from_by < now:
                    db.del_subscribtion(message.from_user.id)
                    await bot.send_message(message.chat.id,
                                           f"*CRIMSON PLAID*\n\n*–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:*\n"
                                           f"_–ü–æ–¥–ø–∏—à–∏—Å—å - https://vk.com/crimsonplaid_\n\n"
                                           f"_–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "
                                           f"–ø–æ—è–≤–∏–≤—à–µ–π—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏_ üòâ",
                                           reply_markup=mark_menu, parse_mode="Markdown")
                else:
                    await bot.send_message(message.chat.id,
                                           f"*CRIMSON PLAID*\n\n_–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "
                                           f"–ø–æ—è–≤–∏–≤—à–µ–π—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏_ üòâ",
                                           reply_markup=mark_menu, parse_mode="Markdown")


@dp.message_handler(content_types=ContentTypes.TEXT, state=Register.confirm)
async def confirm_true(message: types.Message, state: FSMContext):

    if message.text == '–° –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω ‚úÖÔ∏è':

        db.add_user(message.from_user.username, message.from_user.id)  # –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—á–∫—É –¥–±
        db.confirm(True, message.from_user.id)
        await message.answer("–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!")
        await Register.next()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup = my_sex)
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞, –≤–∞–º –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è —Å –Ω–∏–º–∏ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

@dp.message_handler(content_types=ContentTypes.TEXT, state=Register.sex)
async def sex_select(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data['info'] = message.text


        if data['info'] == "–ü–∞—Ä–µ–Ω—å üë®":
            await state.finish()
            db.edit_sex(True, message.from_user.id)
            await message.answer("*–£–∫–∞–∑–∞–Ω –ø–æ–ª:* –º—É–∂—Å–∫–æ–π", parse_mode = "Markdown")
            with open('files/video_user/instructions.mp4', 'rb') as video:
                await bot.send_video(message.chat.id, video, caption="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –∫–æ—Ä–æ—Ç–∫–æ–π –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞")
            await start(message, state)

        elif data['info'] == "–î–µ–≤—É—à–∫–∞ üë©":
            await state.finish()
            db.edit_sex(False, message.from_user.id)
            await message.answer("*–£–∫–∞–∑–∞–Ω –ø–æ–ª:* –ñ–µ–Ω—Å–∫–∏–π", parse_mode = "Markdown")
            with open('files/video_user/instructions.mp4', 'rb') as video:
                await bot.send_video(message.chat.id, video, caption="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –∫–æ—Ä–æ—Ç–∫–æ–π –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞")
            await start(message, state)
        

        else:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—É")


@dp.message_handler(lambda message: message.text == '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ üîç', state='*')
async def search(message: types.Message):
    sub_channel = await bot.get_chat_member(-1001576490683, message.from_user.id)

    if sub_channel.status == "left":
        await message.answer(
            '‚ùåÔ∏è *–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞*\n\n'
            '_–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å_',
            reply_markup=channel_menu, parse_mode = " Markdown")
    else:
        await message.answer('*üîé –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –ø–æ–∏—Å–∫–∞:*', reply_markup=search_menu, parse_mode = "Markdown")


@dp.message_handler(lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É üë´', state='*')
async def sex_search(message: types.Message):
    await message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: *', reply_markup=sex_menu, parse_mode = "Markdown")


@dp.message_handler(commands=['commands'])
async def commands(message: types.Message):
    await message.answer(
        '*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —á–∞—Ç–∞*\n_–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ, –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º_\n\n'
        '*/kiss* - _–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n\n*/hud* - _–û–±–Ω—è—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n\n*/pat* - _–ü–æ–≥–ª–∞–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_'
        '\n\n*/wink* - _–ü–æ–¥–º–∏–≥–Ω—É—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É_\n\n*/slap* - _–û—Ç—à–ª–µ–ø–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n\n*/bite* - _–°–¥–µ–ª–∞—Ç—å –∫—É—Å—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É_',
        parse_mode='Markdown')


@dp.message_handler(commands=['terms'])
async def support(message: types.Message):
    await message.answer(
        '[–ü—Ä–∞–≤–∏–ª–∞](https://telegra.ph/Pravila-anonimnogo-chata-Crimson-Plaid-07-12) –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –ê–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ, —Å–æ–≤–µ—Ç—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º',
        parse_mode="Markdown")

@dp.message_handler(commands=['help'])
async def support(message: types.Message):
    await message.answer('–ö—Ä–∞—Ç–∫–∞—è [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è](https://telegra.ph/Instrukciya-Anonimnogo-chata-08-12) –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞.\n\n–ï—Å–ª–∏ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Ö –∑–∞–¥–∞—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - @CrimsonChatSupport \n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ —Å–µ—Ä—å–µ–∑–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–ª–∞–Ω–µ —Ä–∞–±–æ—Ç—ã —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–∫–ª–∞–º—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @kseniafilatova228',
        parse_mode="Markdown")


@dp.message_handler(commands=['account'])
@dp.message_handler(lambda message: message.text == '–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç üë§')
async def price(message: types.Message):
    account = db.get_account(message.from_user.id)[0]

    if str(db.get_media(message.from_user.id)[0]).endswith("mp4"):
        with open('files/video_user/avatars/' + str(message.from_user.id) + '.mp4', 'rb') as video:
            await bot.send_video(message.chat.id, video,
                                 caption=f"{account[10]}, {account[9]}\n\n*Instagram:* "
                                         f"{account[8]}\n*–í–∫–æ–Ω—Ç–∞–∫—Ç–µ:* {account[7]}",
                                 parse_mode="Markdown")

    elif str(db.get_media(message.from_user.id)[0]).endswith("jpg"):
        with open('files/photo_user/avatars/' + str(message.from_user.id) + '.jpg', 'rb') as photoid:
            await bot.send_photo(message.chat.id, photoid,
                                 caption=f"{account[10]}, {account[9]}\n\n*Instagram:* "
                                         f"{account[8]}\n*–í–∫–æ–Ω—Ç–∞–∫—Ç–µ:* {account[7]}",
                                 parse_mode="Markdown")

    else:
        await message.answer(
            f"*Nikname:* _{account[10]}_\n*–ì–æ—Ä–æ–¥:* _{account[9]}_\n"
            f"*Instagram:* _{account[8]}_\n*–í–∫–æ–Ω—Ç–∞–∫—Ç–µ:* _{account[7]}_", parse_mode = "Markdown")

    await message.answer("1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º\n2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã\n4. –∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É Instagram\–í–∫–æ–Ω—Ç–∞–∫—Ç–µ\n5.–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", reply_markup = select_menu)
    await Account.select.set()


@dp.message_handler(content_types=ContentTypes.TEXT, state=Account.select)
async def not_add_photo_report(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "1":
            await state.finish()
            await bot.send_message(
                message.chat.id,
                '*–ö–∞–∫ –º–Ω–µ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?*'
                     '\n\n_–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ —á–µ–º –∏–∑ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –º–µ–Ω—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤_'
                     '\n\n_–î–ª—è –æ—Ç–º–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ "–û—Ç–º–µ–Ω–∞"_',
                reply_markup = None,
                parse_mode='Markdown')
            await Form.nickname.set()
        
        elif message.text == "2":
            await state.finish()
            await bot.send_message(
                message.chat.id,
                '*–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É*\n\n_–¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å —Å–ª–æ–≤–æ "–û—Ç–º–µ–Ω–∞"_',
                reply_markup=None,
                parse_mode='Markdown'
            )
            await Form.photo.set()

        elif message.text == "3":
            await message.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        elif message.text == "4":
            await bot.send_message(
                    message.chat.id,
                    "_–í—ã–±–µ—Ä–∏—Ç—å —Å–æ—Ü —Å–µ—Ç—å, —Å—Å—ã–ª–∫—É –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å_",
                    reply_markup=menu_social,
                    parse_mode='Markdown')
            await state.finish()
        elif message.text == "5":
            await state.finish()
            await bot.send_message(
                message.chat.id,
                '*–û—Ç–ø—Ä–∞–≤—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥*'
                     '\n\n_–î–ª—è –æ—Ç–º–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ "–û—Ç–º–µ–Ω–∞"_',
                reply_markup = None,
                parse_mode='Markdown')
            await Form.city.set()

        elif message.text == "–ù–∞–∑–∞–¥ üîô":
            await state.finish()
            await start(message, state)

@dp.message_handler(commands=['settings'])
async def settings(message: types.Message):
    await message.answer(
        "*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n_–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏_",
        parse_mode="Markdown", reply_markup = settings_menu)

@dp.message_handler(lambda message: db.blocked_exists(message.from_user.id) == True)
async def block(message: types.Message):
    await message.answer(
        "*–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!* ‚õîÔ∏è\n\n_–í—ã –º–æ–∂–µ—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø–∏—Å–∞–≤ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /support_",
        parse_mode="Markdown")


@dp.message_handler(commands=['support'])
async def send_report(message: types.Message):
    await Report.info.set()
    await message.answer(
        '_–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö,–∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –µ–µ —Ä–µ—à–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã'
        '\n\n_–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏–π –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ '
        '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –∫ –∑–∞—è–≤–∫–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ_\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ "–û—Ç–º–µ–Ω–∞"_',
        parse_mode="Markdown")


@dp.message_handler(commands=['about'])
async def send_about(message: types.Message):
    await message.answer('@Crimson\_plaid\_bot - –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n\n–ù–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ [VKontakte](https://vk.com/crimsonplaid), –∑–¥–µ—Å—å –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞—Å–∞–µ–º–æ –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞.\n\n@CrimsonNews -  –∫–∞–Ω–∞–ª –≥–¥–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤ [Twitter](https://twitter.com/crimson_plaid) –≥–¥–µ —Ç–∞–∫ –∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –∏ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è—Ö\n\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—à–µ–≥–æ —á–∞—Ç–∞ –Ω–∞ [Github](https://github.com/Alexsey272/Anon-Plaid)\n\n*–í–µ—Ä—Å–∏—è:* _–û–ë–¢ v0.3_',parse_mode="Markdown")

@dp.message_handler(content_types=ContentTypes.PHOTO, state=Report.info)
async def add_photo_report(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['info'] = message.caption
        info = data['info']

        await message.photo[-1].download('files/photo_user/' + str(message.from_user.id) + 'report.jpg')
        with open('files/photo_user/' + str(message.from_user.id) + 'report.jpg', 'rb') as photo:
            await bot.send_photo(config.BOT_OWNER, photo,
                                 caption=f"*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n_{message.from_user.id}_\n\n_{info}_",
                                 parse_mode="Markdown")
        await message.answer(
            "‚úÖ _–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è, –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç_",
            parse_mode="Markdown")

        await state.finish()


@dp.message_handler(content_types=ContentTypes.TEXT, state=Report.info)
async def not_add_photo_report(message: types.Message, state: FSMContext):
    async with state.proxy() as data:

        if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.finish()
            await message.answer("_–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ_", parse_mode="Markdown")
            await start(message, state)
        else:
            data['info'] = message.text
            info = data['info']
            await bot.send_message(config.BOT_OWNER, f"*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n_{message.from_user.id}\n\n{info}_",
                                   parse_mode="Markdown")
            await message.answer(
                "‚úÖ _–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ—è, –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç_",
                parse_mode="Markdown")
            await state.finish()


@dp.message_handler(content_types=ContentTypes.LOCATION, state=Form.city)
async def add_city(message: types.Message, state: FSMContext):
    longitude = message.location.longitude
    latitude = message.location.latitude

    r = requests.get(
        f'https://geocode-maps.yandex.ru/1.x?format=json&lang=ru_RU&kind=house&geocode={longitude},{latitude}&'
        f'apikey={config.YANDEX_API}')
    json_data = r.json()

    address = json_data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["metaDataProperty"][
        "GeocoderMetaData"]["AddressDetails"]["Country"]['AdministrativeArea']['SubAdministrativeArea']['Locality'][
        'LocalityName']

    await state.finish()
    db.add_city(message.from_user.id, address)
    await message.answer(f"*–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥:* _{address}_", parse_mode="Markdown")
    await start(message, state)


@dp.message_handler(state=Form.city)
async def add_city(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await start(message, state)
    else:
        return await message.answer('*–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, '
                                    '–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ "–û—Ç–º–µ–Ω–∞", —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ*', parse_mode="Markdown")


@dp.message_handler(state=Form.nickname)
async def add_nickname(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await start(message, state)
    else:
        if len(message.text) > 30 or len(message.text) < 5:
            await message.answer(
                '*–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –±–æ–ª—å—à–µ —á–µ–º –∏–∑ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤*',
                parse_mode="Markdown")
        else:
            try:
                async with state.proxy() as data:
                    data['nickname'] = message.text
                    await state.finish()
                    db.add_nickname(message.from_user.id, data['nickname'])
                    await message.answer(f"*–í–∞—à –Ω–∏–∫–Ω–µ–π–º:* _{data['nickname']}_", parse_mode="Markdown")
                    await start(message, state)

            except sqlite3.IntegrityError:
                await message.answer(
                    f"*–ù–∏–∫–Ω–µ–π–º:* _{data['nickname']}_"
                    f"\n\n_–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ_", parse_mode="Markdown")
                await Form.nickname.set()


@dp.message_handler(state=Form.vk)
async def add_vk(message: types.Message, state: FSMContext):
    try:
        entity = message.entities[0]

        if entity.type in ["url"]:
            if "vk.com" in message.text:
                async with state.proxy() as data:
                    data['vk'] = message.text
                    await state.finish()
                    db.add_vk(message.from_user.id, data['vk'])
                    await message.answer(f"*–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –≤ –≤–∫: * _{data['vk']}_", parse_mode="Markdown")
                    await start(message, state)
            else:
                await message.answer('‚ö†Ô∏è *–°—Å—ã–ª–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è, —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –≤–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∫*',
                                     parse_mode="Markdown")
        else:
            await message.answer("‚ö†Ô∏è *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ*", parse_mode="Markdown")

    except IndexError:
        if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.finish()
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await start(message, state)
        else:
            await message.answer("‚ö†Ô∏è *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ*", parse_mode="Markdown")


@dp.message_handler(state=Form.insta)
async def add_insta(message: types.Message, state: FSMContext):
    try:
        entity = message.entities[0]

        if entity.type in ["url"]:
            if "instagram.com" in message.text:
                async with state.proxy() as data:
                    data['insta'] = message.text
                    await state.finish()
                    db.add_insta(message.from_user.id, data['insta'])
                    await message.answer(f"*–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º:* _{data['insta']}_", parse_mode="Markdown")
                    await start(message, state)
            else:
                await message.answer(
                    "‚ö†Ô∏è *–°—Å—ã–ª–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è, —Å—Å—ã–ª–∫–æ–π –Ω–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç Instagram*",
                    parse_mode="Markdown")

        else:
            await message.answer("‚ö†Ô∏è *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Instagram –∞–∫–∫–∞—É–Ω—Ç*", parse_mode="Markdown")

    except IndexError:
        if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.finish()
            await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
            await start(message, state)
        else:
            await message.answer("‚ö†Ô∏è *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Instagram –∞–∫–∫–∞—É–Ω—Ç*", parse_mode="Markdown")


@dp.message_handler(content_types=ContentTypes.PHOTO, state=Form.photo)
async def add_avatar(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo
        await data['photo'][-1].download('files/photo_user/avatars/' + str(message.from_user.id) + '.jpg')
        db.add_media(message.from_user.id, 'files/photo_user/avatars/' + str(message.from_user.id) + '.jpg')
        await message.answer("‚úÖÔ∏è –§–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.finish()
        await start(message, state)


@dp.message_handler(content_types=ContentTypes.VIDEO, state=Form.photo)
async def add_avatar(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['video'] = message.video.file_id
        file = await bot.get_file(data['video'])
        file_path = file.file_path
        await bot.download_file(file_path, 'files/video_user/avatars/' + str(message.from_user.id) + '.mp4')
        db.add_media(message.from_user.id, 'files/video_user/avatars/' + str(message.from_user.id) + '.mp4')
        await message.answer("‚úÖÔ∏è –í–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.finish()
        await start(message, state)


@dp.message_handler(content_types=ContentTypes.TEXT, state=Form.photo)
async def add_avatar(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("*–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!*", parse_mode="Markdown")
        await state.finish()
        await start(message, state)
    else:
        await message.answer(
            "*–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, "
            "–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ '–û—Ç–º–µ–Ω–∞'*",
            parse_mode="Markdown")


@dp.message_handler(lambda message: message.text == '–ü–∞—Ä–Ω—è üë®' or message.text == '–î–µ–≤—É—à–∫—É üë©', state='*')
async def chooce_sex(message: types.Message, state: FSMContext):
    await state.update_data(msg=message.text)

    user_data = await state.get_data()

    try:
        if db.queue_exists(message.from_user.id):
            db.delete_from_queue(message.from_user.id)
        if user_data['msg'] == '–ü–∞—Ä–Ω—è üë®':
            db.add_to_queue(message.from_user.id, True)
            await message.answer(
                '‚è≥Ô∏è *–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞,\n–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*\n\n_–ú—ã —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–º –≤–∞–º —Å–æ–±—Å–µ–¥–µ–Ω–∏–∫–∞_',
                parse_mode="Markdown")
        elif user_data['msg'] == '–î–µ–≤—É—à–∫—É üë©':
            db.add_to_queue(message.from_user.id, False)
            await message.answer(
                '‚è≥Ô∏è *–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞,\n–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*\n\n_–ú—ã —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–º –≤–∞–º —Å–æ–±—Å–µ–¥–µ–Ω–∏–∫–∞_',
                parse_mode="Markdown")

        while True:
            await asyncio.sleep(0.5)
            if db.search(db.get_sex_user(message.from_user.id)[0]) is not None and \
                    db.search(db.get_sex_user(message.from_user.id)[0])[
                        0] != message.from_user.id:  # –µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —é–∑–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏
                try:
                    db.update_connect_with(db.search(db.get_sex_user(message.from_user.id)[0])[0],
                                           message.from_user.id)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å –∫–µ–º –æ–±—â–∞–µ—Ç—Å—è —é–∑–µ—Ä
                    db.update_connect_with(message.from_user.id, db.search(db.get_sex_user(message.from_user.id)[0])[0])
                    break
                except Exception as e:
                    print(e)

        if db.select_connect_with(message.from_user.id)[0] is not None:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω–µ–∫—Ç–∏–ª—Å—è

            try:
                db.delete_from_queue(message.from_user.id)  # —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                db.delete_from_queue(db.select_connect_with(message.from_user.id)[0])
            except:
                pass

            await Chating.msg.set()

            db.last_update(db.select_connect_with(message.from_user.id)[0], message.from_user.id)
            db.last_update(message.from_user.id, db.select_connect_with(message.from_user.id)[0])

            await bot.send_message(db.select_connect_with(message.from_user.id)[0],
                                   'ü§ñ *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!*\n_–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥,'
                                   '–≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏:_\n\n*/stop* _- –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥_'
                                   '\n\n_–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!_',
                                   reply_markup=menu_msg, parse_mode="Markdown")
            await bot.send_message(message.from_user.id,
                                   'ü§ñ *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!*\n_–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥,'
                                   '–≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏:_\n\n*/stop* _- –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥_'
                                   '\n\n_–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!_',
                                   reply_markup=menu_msg, parse_mode="Markdown")

    except Exception as e:
    	if "bot was blocked" in str(e):
    		await message.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    		db.delete_block_user(db.select_connect_with(message.from_user.id)[0], message.from_user.id, None)
    		await start(message, state)
    	warning_log.warning(e)
    	await send_to_channel_log_exception(message, e)

@dp.message_handler(commands = ['search'], state='*')
@dp.message_handler(lambda message: message.text == '–†–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–∏—Å–∫ üîé', state='*')
async def random_search(message: types.Message, state: FSMContext):
    try:
        if db.queue_random_exists(message.from_user.id):
            db.delete_from_random_queue(message.from_user.id)

        db.add_to_random_queue(message.from_user.id, bool(db.get_sex_user(message.from_user.id)))
        await message.answer(
            '‚è≥Ô∏è *–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞,\n–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*\n\n_–ú—ã —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–º –≤–∞–º —Å–æ–±—Å–µ–¥–µ–Ω–∏–∫–∞_ ',
            parse_mode="Markdown")

        while True:
            await asyncio.sleep(0.5)
            if db.search_random() is not None and db.search_random()[
                0] != message.from_user.id:  # –µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —é–∑–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏
                try:

                    db.update_connect_with(db.search_random()[0], message.from_user.id)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å –∫–µ–º –æ–±—â–∞–µ—Ç—Å—è —é–∑–µ—Ä
                    db.update_connect_with(message.from_user.id, db.search_random()[0])
                    break
                except Exception as e:
                    print(e)

        if db.select_connect_with(message.from_user.id)[0] is not None:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω–µ–∫—Ç–∏–ª—Å—è

            try:
                db.delete_from_random_queue(message.from_user.id)  # —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                db.delete_from_random_queue(db.select_connect_with(message.from_user.id)[0])
            except:
                pass

            db.last_update(db.select_connect_with(message.from_user.id)[0], message.from_user.id)
            db.last_update(message.from_user.id, db.select_connect_with(message.from_user.id)[0])

            if db.get_sex_user(message.from_user.id)[0] == 1:
                a = 'üßë –ü–∞—Ä–µ–Ω—å'
            else:
                a = 'üëß –î–µ–≤—É—à–∫–∞'

            if db.get_sex_user(db.select_connect_with(message.from_user.id)[0]) == 1:
                b = 'üßë –ü–∞—Ä–µ–Ω—å'

            else:
                b = 'üëß –î–µ–≤—É—à–∫–∞'

            await Chating.msg.set()

            await bot.send_message(db.select_connect_with(message.from_user.id)[0],
                                   'ü§ñ *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!*\n\n–ü–æ–ª: ' + a + '\n\n_–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, '
                                   '–≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏:_\n\n*/stop* _- –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥_'
                                   '\n\n_–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!_',
                                   reply_markup=menu_msg, parse_mode="Markdown")
            await bot.send_message(message.from_user.id,
                                   'ü§ñ *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!*\n\n–ü–æ–ª: ' + b + '\n\n_–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, '
                                   '–≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏:_\n\n*/stop* _- –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥_'
                                   '\n\n_–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!_',
                                   reply_markup=menu_msg, parse_mode="Markdown")


    except Exception as e:
    	if "bot was blocked" in str(e):
    		await message.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    		db.delete_block_user(db.select_connect_with(message.from_user.id)[0], message.from_user.id, None)
    		await start(message, state)
    	warning_log.warning(e)
    	await send_to_channel_log_exception(message, e)

@dp.message_handler(commands=['kiss'], state = Chating.msg)
async def kiss(message: types.Message):
    await message.answer(
        '*–í—ã –ø–æ—Ü–µ–ª–æ–≤–∞–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞*',
        parse_mode="Markdown")
    await bot.send_video(
            db.select_connect_with(message.from_user.id)[0],
            'https://tenor.com/bk57O.gif',
            caption='*–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–∞—Å –ø–æ—Ü–µ–ª–æ–≤–∞–ª*',
            parse_mode='Markdown')

@dp.message_handler(commands=['hud'], state = Chating.msg)
async def hud(message: types.Message):
    await message.answer(
        '*–í—ã –æ–±–Ω—è–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞*',
        parse_mode='Markdown')
    await bot.send_video(
                db.select_connect_with(message.from_user.id)[0],
                'https://tenor.com/bb9kg.gif',
                caption='*–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ–±–Ω—è–ª –≤–∞—Å*',
                parse_mode='Markdown')

@dp.message_handler(commands=['pat'], state = Chating.msg)
async def pat(message: types.Message):
    await message.answer(
        '*–í—ã –ø–æ–≥–ª–∞–¥–∏–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞*',
        parse_mode='Markdown')
    await bot.send_video(
                db.select_connect_with(message.from_user.id)[0],
                'https://tenor.com/AkZm.gif',
                caption='*–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–≥–ª–∞–¥–∏–ª –≤–∞—Å*',
                parse_mode='Markdown')

@dp.message_handler(commands=['wink'], state = Chating.msg)
async def wink(message: types.Message):
    await message.answer(
        '*–í—ã –ø–æ–¥–º–∏–≥–Ω—É–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É*',
        parse_mode='Markdown')
    await bot.send_video(
                db.select_connect_with(message.from_user.id)[0],
                'https://tenor.com/Ny7S.gif',
                caption='*–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–∞–º –ø–æ–¥–º–∏–≥–Ω—É–ª*',
                parse_mode='Markdown')

@dp.message_handler(commands=['slap'], state = Chating.msg)
async def slap(message: types.Message):
    await message.answer(
        '*–í—ã –æ—Ç—à–ª–µ–ø–∞–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞*',
        parse_mode='Markdown')
    await bot.send_video(
                db.select_connect_with(message.from_user.id)[0],
                'https://tenor.com/7EU6.gif',
                caption='*–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–∞—Å –æ—Ç—à–ª–µ–ø–∞–ª*',
                parse_mode='Markdown')


@dp.message_handler(commands=['bite'], state = Chating.msg)
async def bite(message: types.Message):
    await message.answer(
        '*–í—ã —Å–¥–µ–ª–∞–ª–∏ –∫—É—Å—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É*',
        parse_mode='Markdown')
    await bot.send_video(
                db.select_connect_with(message.from_user.id)[0],
                'https://tenor.com/Z8Tf.gif',
                caption='*–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–∞–º —Å–¥–µ–ª–∞–ª –∫—É—Å—å*',
                parse_mode='Markdown')

async def anti_flood(*args, **kwargs):
    m = args[0]
    await m.answer("–ù–µ —Ñ–ª—É–¥–∏ :)")

@dp.message_handler(content_types=ContentTypes.TEXT)
@dp.message_handler(state=Chating.msg)
@dp.throttled(anti_flood,rate=1)
async def chat(message: types.Message, state: FSMContext):
    try:
        await state.update_data(msg=message.text)

        user_data = await state.get_data()

        if user_data['msg'] == '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è':
            await message.answer(
                '‚ö†Ô∏è *–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–≤–æ–∏—Ö —Å—Ç—Ä–æ–Ω–∏—Ü?'
                '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å, –≤ —Å–ª—É—á–∞–∏ —Å–æ–≥–ª–∞—Å–∏—è, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É'
                '—Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏*',
                parse_mode="Markdown",
                reply_markup=link_menu)

        elif user_data['msg'] == '‚ùå–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥' or user_data['msg'] == '/stop':
            if db.select_connect_with(message.from_user.id)[0] is not None:
                await state.finish()
                await message.answer(
                    '*–î–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–µ–Ω*\n\n_–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search_',
                    reply_markup=mark_menu,
                    parse_mode='Markdown')
                await message.answer(
                    '_–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è —Å '
                    '–ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫ –¥–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é_',
                    reply_markup=menu_like,
                    parse_mode='Markdown')
                await bot.send_message(
                    db.select_connect_with(message.from_user.id)[0],
                    '*–î–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–µ–Ω*\n\n_–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search_',
                    reply_markup=mark_menu,
                    parse_mode='Markdown')
                await bot.send_message(
                    db.select_connect_with(message.from_user.id)[0],
                    '_–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫ –¥–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é_',
                    reply_markup=menu_like,
                    parse_mode='Markdown')
                db.update_connect_with(None, db.select_connect_with(message.from_user.id)[0])
                db.update_connect_with(None, message.from_user.id)
            else:
                await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥–∏–∞–ª–æ–≥–µ")


        elif user_data['msg'] == '–ù–∞–∑–∞–¥ üîô':
            await start(message, state)
            await state.finish()

        else:

            try:
                entity = message.entities[0]
                if entity.type in ["url", "text_link"]:
                    await message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!')
                    await bot.send_message(
                        db.select_connect_with(message.from_user.id)[0],
                        "–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")

            except (AttributeError, IndexError):
                await bot.send_message(db.select_connect_with(message.from_user.id)[0],
                                       user_data['msg'])  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db.log_msg(message.from_user.id, user_data['msg'])  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–æ–≤ –≤ –±–¥
                await send_to_channel_log(message)



    except aiogram.utils.exceptions.ChatIdIsEmpty:
        await state.finish()
        if db.queue_random_exists(message.from_user.id) or db.queue_exists(message.from_user.id):
            await bot.send_message(message.chat.id,
                                   "_–í—ã –µ—â–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥–∏–∞–ª–æ–≥–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ "
                                   "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ—Ä–æ –º—ã –Ω–∞–π–¥–µ–º –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_",
                                   parse_mode="Markdown")
        else:
            await start(message, state)
    except aiogram.utils.exceptions.BotBlocked:
    	await message.answer("üòî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!")
    	db.delete_block_user(db.select_connect_with(message.from_user.id)[0], message.from_user.id, None)
    	await state.finish()
    	await start(message, state)
    except Exception as e:
    	warning_log.warning(e)
    	await send_to_channel_log_exception(message, e)


@dp.message_handler(content_types=ContentTypes.PHOTO,state='*')
async def chating_photo(message: types.Message, state: FSMContext):

    if db.select_connect_with(message.from_user.id)[0] != None:
        try:
            await message.photo[-1].download('files/photo_user/' + str(message.from_user.id) + '.jpg')

            with open('files/photo_user/' + str(message.from_user.id) + '.jpg', 'rb') as photoid:
                await bot.send_photo(db.select_connect_with(message.from_user.id)[0], photoid, caption=message.caption)
        
        except Exception as e:
            warning_log.warning(e)
            await send_to_channel_log_exception(message, e)


@dp.message_handler(content_types=ContentTypes.VIDEO, state='*')
async def chating_video(message: types.Message, state: FSMContext):

    if db.select_connect_with(message.from_user.id)[0] != None:
        try:
            file_id = message.video.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            await bot.download_file(file_path, 'files/video_user/' + str(message.from_user.id) + '.mp4')
            with open('files/video_user/' + str(message.from_user.id) + '.mp4', 'rb') as video:
                await bot.send_video(db.select_connect_with(message.from_user.id)[0], video, caption=message.text)
        except Exception as e:
            warning_log.warning(e)
            await send_to_channel_log_exception(message, e)


@dp.message_handler(content_types=ContentTypes.CONTACT, state='*')
async def chating_contact(message: types.Message, state: FSMContext):
    if db.select_connect_with(message.from_user.id)[0] != None:
        phone = message.contact.phone_number
        name = message.contact.first_name
        last_name = message.contact.last_name
        await bot.send_contact(db.select_connect_with(message.from_user.id)[0], phone, name, last_name)


@dp.message_handler(content_types=ContentTypes.VOICE, state='*')
async def chating_voice(message: types.Message, state: FSMContext):
    if db.select_connect_with(message.from_user.id)[0] != None:
        try:
            file_id = message.voice.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            await bot.download_file(file_path, 'files/voice_user/' + str(message.from_user.id) + '.ogg')
            with open('files/voice_user/' + str(message.from_user.id) + '.ogg', 'rb') as voice:
                await bot.send_voice(db.select_connect_with(message.from_user.id)[0], voice, caption=message.text)
    
        except Exception as e:
            warning_log.warning(e)
            await send_to_channel_log_exception(message, e)


@dp.message_handler(content_types=ContentTypes.AUDIO, state='*')
async def audio(message: types.Message, state: FSMContext):
    if db.select_connect_with(message.from_user.id)[0] != None:
        try:
            file_id = message.audio.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            await bot.download_file(file_path, 'files/audio_user/' + str(message.from_user.id) + '.mp3')
            with open('files/audio_user/' + str(message.from_user.id) + '.mp3', 'rb') as audioid:
                await bot.send_audio(db.select_connect_with(message.from_user.id)[0], audioid, caption=message.text)
        except Exception as e:
            warning_log.warning(e)
            await send_to_channel_log_exception(message, e)


@dp.message_handler(content_types=ContentTypes.STICKER,state='*')
async def chating_sticker(message: types.Message, state: FSMContext):
    if db.select_connect_with(message.from_user.id)[0] != None:
        try:
            await bot.send_sticker(db.select_connect_with(message.from_user.id)[0], message.sticker.file_id)
        except Exception as e:
            warning_log.warning(e)
            await send_to_channel_log_exception(message, e)

# –ª–æ–≥–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
async def send_to_channel_log(message: types.Message):
    await bot.send_message(config.DIALOG,
                           f'ID - {str(message.from_user.id)}\n'
                           f'username - @{str(message.from_user.username)}\n'
                           f'message - {str(message.text)}')


async def send_to_channel_log_exception(message: types.Message, except_name):
    await bot.send_message(config.ERROR, f'–û—à–∏–±–∫–∞\n\n{except_name}')

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–∞–¥
@dp.message_handler(commands=['back'])
@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥ üîô', state='*')
async def back(message: types.Message, state: FSMContext):
    await state.finish()
    await start(message, state)